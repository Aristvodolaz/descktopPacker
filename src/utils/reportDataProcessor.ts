import { ReportConfig, ReportFilter } from '../types'
import { downloadColumnMappings } from './columnMappings'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –¥–∞–Ω–Ω—ã–º
export const applyFilters = (data: any[], filters: ReportFilter[]): any[] => {
  if (!filters.length) return data

  return data.filter(row => {
    return filters.every(filter => {
      const value = row[filter.field]
      const filterValue = filter.value

      if (value === null || value === undefined) {
        return filter.operator === 'equals' && (filterValue === null || filterValue === '')
      }

      switch (filter.operator) {
        case 'equals':
          return String(value).toLowerCase() === String(filterValue).toLowerCase()
        
        case 'contains':
          return String(value).toLowerCase().includes(String(filterValue).toLowerCase())
        
        case 'greater':
          const numValue1 = Number(value)
          const numFilterValue1 = Number(filterValue)
          if (isNaN(numValue1) || isNaN(numFilterValue1)) return false
          return numValue1 > numFilterValue1
        
        case 'less':
          const numValue2 = Number(value)
          const numFilterValue2 = Number(filterValue)
          if (isNaN(numValue2) || isNaN(numFilterValue2)) return false
          return numValue2 < numFilterValue2
        
        case 'between':
          if (Array.isArray(filterValue) && filterValue.length === 2) {
            const numValue = Number(value)
            const numMin = Number(filterValue[0])
            const numMax = Number(filterValue[1])
            if (isNaN(numValue) || isNaN(numMin) || isNaN(numMax)) return false
            return numValue >= numMin && numValue <= numMax
          }
          return false
        
        case 'in':
          if (Array.isArray(filterValue)) {
            return filterValue.some(val => 
              String(value).toLowerCase() === String(val).toLowerCase()
            )
          }
          return String(value).toLowerCase() === String(filterValue).toLowerCase()
        
        default:
          return true
      }
    })
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫ –¥–∞–Ω–Ω—ã–º
export const applySorting = (data: any[], sorting: { field: string; direction: 'asc' | 'desc' }[]): any[] => {
  if (!sorting.length) return data

  return [...data].sort((a, b) => {
    for (const sort of sorting) {
      const aVal = a[sort.field]
      const bVal = b[sort.field]

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ null/undefined –∑–Ω–∞—á–µ–Ω–∏–π
      if (aVal === null || aVal === undefined) {
        if (bVal === null || bVal === undefined) continue
        return sort.direction === 'asc' ? -1 : 1
      }
      if (bVal === null || bVal === undefined) {
        return sort.direction === 'asc' ? 1 : -1
      }

      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–∏—Å–µ–ª (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å—Ç—Ä–æ–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏)
      const aNum = Number(aVal)
      const bNum = Number(bVal)
      if (!isNaN(aNum) && !isNaN(bNum) && aVal !== '' && bVal !== '') {
        const result = aNum - bNum
        if (result !== 0) {
          return sort.direction === 'asc' ? result : -result
        }
        continue
      }

      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç
      const aDate = new Date(aVal)
      const bDate = new Date(bVal)
      if (!isNaN(aDate.getTime()) && !isNaN(bDate.getTime())) {
        const result = aDate.getTime() - bDate.getTime()
        if (result !== 0) {
          return sort.direction === 'asc' ? result : -result
        }
        continue
      }

      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
      const result = String(aVal).localeCompare(String(bVal))
      if (result !== 0) {
        return sort.direction === 'asc' ? result : -result
      }
    }
    return 0
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
export const selectFields = (data: any[], fields: string[]): any[] => {
  if (!fields.length) return data

  return data.map(row => {
    const newRow: any = {}
    fields.forEach(field => {
      newRow[field] = row[field]
    })
    return newRow
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
export const groupData = (data: any[], groupByFields: string[]): any[] => {
  if (!groupByFields.length) return data

  const groups: { [key: string]: any[] } = {}

  data.forEach(row => {
    const groupKey = groupByFields.map(field => row[field] || '').join('|')
    if (!groups[groupKey]) {
      groups[groupKey] = []
    }
    groups[groupKey].push(row)
  })

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π
  return Object.entries(groups).map(([groupKey, groupRows]) => {
    const groupValues = groupKey.split('|')
    const aggregatedRow: any = {}

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    groupByFields.forEach((field, index) => {
      aggregatedRow[field] = groupValues[index]
    })

    // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è (–∏—â–µ–º –∏—Ö –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
    const numericFields = ['Itog_Zakaz', 'SOH', 'Kol_vo_Syrya', '–ò—Ç–æ–≥ –ó–∞–∫–∞–∑', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤', 'itog_zakaz', 'soh', 'kol_vo_syrya']
    
    // –¢–∞–∫–∂–µ –∏—â–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —á–∏—Å–ª–∞ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≥—Ä—É–ø–ø—ã
    const firstRow = groupRows[0]
    const additionalNumericFields = Object.keys(firstRow).filter(key => {
      const value = firstRow[key]
      return !isNaN(Number(value)) && value !== null && value !== undefined && value !== ''
    })
    
    const allNumericFields = [...new Set([...numericFields, ...additionalNumericFields])]
    
    allNumericFields.forEach(field => {
      const values = groupRows
        .map(row => {
          const value = row[field]
          return (value !== null && value !== undefined && !isNaN(Number(value))) ? Number(value) : 0
        })
        .filter(val => val !== 0)
      
      if (values.length > 0) {
        aggregatedRow[field] = values.reduce((sum, val) => sum + val, 0)
      } else if (firstRow[field] !== undefined) {
        // –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ —á–∏—Å–ª–æ–≤–æ–µ, –±–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        aggregatedRow[field] = firstRow[field]
      }
    })
    
    // –î–ª—è –Ω–µ—á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π –±–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≥—Ä—É–ø–ø—ã
    Object.keys(firstRow).forEach(field => {
      if (!allNumericFields.includes(field)) {
        aggregatedRow[field] = firstRow[field]
      }
    })

    // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –≥—Ä—É–ø–ø–µ
    aggregatedRow['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–ø–∏—Å–µ–π'] = groupRows.length

    return aggregatedRow
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
export const applyDateRange = (data: any[], dateRange: { from: string; to: string } | undefined): any[] => {
  if (!dateRange || (!dateRange.from && !dateRange.to)) return data

  const fromDate = dateRange.from ? new Date(dateRange.from + 'T00:00:00') : null
  const toDate = dateRange.to ? new Date(dateRange.to + 'T23:59:59') : null

  return data.filter(row => {
    // –ò—â–µ–º –ø–æ–ª—è —Å –¥–∞—Ç–∞–º–∏
    const dateFields = ['time_start', 'Time_Start', 'time_end', 'Time_End', 'Srok_Godnosti', 'created_at', 'updated_at']
    
    let hasValidDateField = false
    
    for (const field of dateFields) {
      const dateValue = row[field]
      if (dateValue) {
        const date = new Date(dateValue)
        if (!isNaN(date.getTime())) {
          hasValidDateField = true
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–∞—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
          if (fromDate && date < fromDate) continue // –î–∞—Ç–∞ –º–µ–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ
          if (toDate && date > toDate) continue // –î–∞—Ç–∞ –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ
          return true // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –¥–∞—Ç—ã –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
        }
      }
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—è —Å –¥–∞—Ç–∞–º–∏, –Ω–æ –Ω–∏ –æ–¥–Ω–æ –Ω–µ –ø–æ–ø–∞–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω - –∏—Å–∫–ª—é—á–∞–µ–º –∑–∞–ø–∏—Å—å
    if (hasValidDateField) return false
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–µ–π —Å –¥–∞—Ç–∞–º–∏, –≤–∫–ª—é—á–∞–µ–º –∑–∞–ø–∏—Å—å (–Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ)
    return true
  })
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞
export const processReportData = (rawData: any[], config: ReportConfig, skipFieldSelection: boolean = false): any[] => {
  console.log('üîÑ ProcessReportData started:', {
    rawDataLength: rawData.length,
    configFields: config.fields?.length || 0,
    configFilters: config.filters?.length || 0,
    configSorting: config.sorting?.length || 0,
    configGroupBy: config.groupBy?.length || 0,
    skipFieldSelection
  })
  
  let processedData = [...rawData]

  // 1. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–∞—Ç–µ
  if (config.dateRange && (config.dateRange.from || config.dateRange.to)) {
    const beforeDateFilter = processedData.length
    processedData = applyDateRange(processedData, config.dateRange)
    console.log(`üìÖ Date filter: ${beforeDateFilter} ‚Üí ${processedData.length} records`)
  }

  // 2. –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
  if (config.filters && config.filters.length > 0) {
    const beforeFilters = processedData.length
    processedData = applyFilters(processedData, config.filters)
    console.log(`üîç User filters: ${beforeFilters} ‚Üí ${processedData.length} records`)
  }

  // 3. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (config.groupBy && config.groupBy.length > 0) {
    const beforeGrouping = processedData.length
    processedData = groupData(processedData, config.groupBy)
    console.log(`üìä Grouping: ${beforeGrouping} ‚Üí ${processedData.length} records`)
  }

  // 4. –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
  if (config.sorting && config.sorting.length > 0) {
    processedData = applySorting(processedData, config.sorting)
    console.log(`üîÑ Sorting applied by: ${config.sorting.map(s => `${s.field} ${s.direction}`).join(', ')}`)
  }

  // 5. –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –ø–æ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)
  if (!skipFieldSelection && config.fields && config.fields.length > 0) {
    const beforeFieldSelection = processedData.length > 0 ? Object.keys(processedData[0]).length : 0
    processedData = selectFields(processedData, config.fields)
    const afterFieldSelection = processedData.length > 0 ? Object.keys(processedData[0]).length : 0
    console.log(`üìã Field selection: ${beforeFieldSelection} ‚Üí ${afterFieldSelection} fields`)
  }

  console.log('‚úÖ ProcessReportData completed:', {
    finalLength: processedData.length,
    finalFields: processedData.length > 0 ? Object.keys(processedData[0]).length : 0
  })

  return processedData
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö
export const getAvailableFields = (data: any[]): string[] => {
  if (!data.length) return []

  const fieldSet = new Set<string>()
  data.forEach(row => {
    Object.keys(row).forEach(key => fieldSet.add(key))
  })

  return Array.from(fieldSet).sort()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π
export const getRussianFieldName = (fieldKey: string): string => {
  return downloadColumnMappings[fieldKey] || fieldKey
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
export const getFieldType = (data: any[], fieldName: string): 'string' | 'number' | 'date' | 'boolean' => {
  if (!data.length) return 'string'

  // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  const sampleSize = Math.min(10, data.length)
  const samples = data.slice(0, sampleSize).map(row => row[fieldName]).filter(val => val !== null && val !== undefined)

  if (!samples.length) return 'string'

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–∞—Ç—É
  if (samples.some(val => {
    const date = new Date(val)
    return !isNaN(date.getTime()) && val.toString().match(/\d{4}-\d{2}-\d{2}/)
  })) {
    return 'date'
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–∏—Å–ª–æ
  if (samples.every(val => !isNaN(Number(val)))) {
    return 'number'
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±—É–ª–µ–≤–æ
  if (samples.every(val => val === true || val === false || val === 'true' || val === 'false' || val === 1 || val === 0)) {
    return 'boolean'
  }

  return 'string'
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤
export const groupByArticleAndCalculateTotal = (data: any[]): any[] => {
  if (!data.length) return data

  console.log('Grouping data by article. Sample row:', data[0])
  console.log('Available fields in data:', Object.keys(data[0]))

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
  const groups: { [key: string]: any[] } = {}
  
  data.forEach(row => {
    // –ò—â–µ–º –ø–æ–ª–µ –∞—Ä—Ç–∏–∫—É–ª–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
    const articleField = Object.keys(row).find(key => 
      key.toLowerCase().includes('–∞—Ä—Ç–∏–∫—É–ª') || 
      key.toLowerCase().includes('article') ||
      key.toLowerCase().includes('sku') ||
      key === 'Artikul' ||
      key === 'artikul'
    )
    
    const articleValue = articleField ? row[articleField] : '–ë–µ–∑ –∞—Ä—Ç–∏–∫—É–ª–∞'
    const groupKey = String(articleValue || '–ë–µ–∑ –∞—Ä—Ç–∏–∫—É–ª–∞')
    
    if (!groups[groupKey]) {
      groups[groupKey] = []
    }
    groups[groupKey].push(row)
  })

  // –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
  return Object.entries(groups).map(([articleValue, groupRows]) => {
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –∫–∞–∫ –æ—Å–Ω–æ–≤—É
    const baseRow = { ...groupRows[0] }
    
    console.log(`Processing group for article: ${articleValue}`)
    console.log(`Group has ${groupRows.length} rows`)
    console.log('Base row keys:', Object.keys(baseRow))
    console.log('Ispolnitel in base row:', baseRow['Ispolnitel'], baseRow['ispolnitel'], baseRow['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'])
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—è –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    const fieldsToSum = [
      '–ò—Ç–æ–≥ –ó–∞–∫–∞–∑', 'Itog_Zakaz', 'itog_zakaz',
      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤', 'Kol_vo_Syrya', 'kol_vo_syrya',
      'SOH', 'soh',
      '–í—Å–µ–≥–æ –≤ –∑–∞–∫–∞–∑–µ', 'Vsego_v_zakaze', 'vsego_v_zakaze'
    ]
    
    // –°—É–º–º–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
    fieldsToSum.forEach(fieldName => {
      const values = groupRows
        .map(row => {
          const value = row[fieldName]
          return (value !== null && value !== undefined && !isNaN(Number(value))) ? Number(value) : 0
        })
        .filter(val => val !== 0)
      
      if (values.length > 0) {
        baseRow[fieldName] = values.reduce((sum, val) => sum + val, 0)
      }
    })
    
    // –í—ã—á–∏—Å–ª—è–µ–º "–í—Å–µ–≥–æ –≤ –∑–∞–∫–∞–∑–µ" –∫–∞–∫ —Å—É–º–º—É –≤—Å–µ—Ö "–ò—Ç–æ–≥ –ó–∞–∫–∞–∑" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞
    const totalOrderAmounts = groupRows
      .map(row => {
        const value = row['–ò—Ç–æ–≥ –ó–∞–∫–∞–∑'] || row['Itog_Zakaz'] || row['itog_zakaz'] || 0
        return (value !== null && value !== undefined && !isNaN(Number(value))) ? Number(value) : 0
      })
      .filter(val => val !== 0)
    
    const totalInOrder = totalOrderAmounts.reduce((sum, val) => sum + val, 0)
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ "–í—Å–µ–≥–æ –≤ –∑–∞–∫–∞–∑–µ"
    baseRow['–í—Å–µ–≥–æ –≤ –∑–∞–∫–∞–∑–µ'] = totalInOrder
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    baseRow['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π'] = groupRows.length
    
    return baseRow
  })
}
