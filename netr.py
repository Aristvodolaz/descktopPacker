import os
import time
import logging
import numpy as np
import pandas as pd
import requests
import sys

from PyQt5 import QtWidgets, QtGui, QtCore
from PyQt5.QtWidgets import QApplication, QFileDialog, QMessageBox

from test import ProgressWindow  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞


class TaskManagerApp(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setStyleSheet("""
            QWidget {
                background-color: #2E3440;
                color: #D8DEE9;
                font-family: Arial;
                font-size: 14px;
            }
            QLineEdit {
                border: 2px solid #88C0D0;
                border-radius: 5px;
                padding: 5px;
                background-color: #3B4252;
                color: #ECEFF4;
            }
            QListWidget {
                border: 2px solid #5E81AC;
                border-radius: 5px;
                background-color: #434C5E;
                color: #ECEFF4;
            }
            QPushButton {
                background-color: #5E81AC;
                border-radius: 5px;
                padding: 10px;
                color: white;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #81A1C1;
            }
            QPushButton:pressed {
                background-color: #4C566A;
            }
        """)

        layout = QtWidgets.QVBoxLayout()

        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.search_field = QtWidgets.QLineEdit(self)
        self.search_field.setPlaceholderText("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
        self.search_field.textChanged.connect(self.filter_list)
        layout.addWidget(self.search_field)

        # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
        self.task_list = QtWidgets.QListWidget(self)
        layout.addWidget(self.task_list)


        # –ö–Ω–æ–ø–∫–∏
        self.load_task_btn = QtWidgets.QPushButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", self)
        self.load_vps_btn = QtWidgets.QPushButton("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –í–ü–°", self)
        self.download_task_btn = QtWidgets.QPushButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", self)

        self.load_task_btn.clicked.connect(self.load_task)
        self.load_vps_btn.clicked.connect(self.load_vps)
        self.download_task_btn.clicked.connect(self.download_task)

        layout.addWidget(self.load_task_btn)
        layout.addWidget(self.load_vps_btn)
        layout.addWidget(self.download_task_btn)

        self.setLayout(layout)
        self.setWindowTitle("–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞–Ω–∏–π")
        self.setGeometry(100, 100, 400, 500)

        self.load_initial_data()

    import requests

    def load_initial_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç QListWidget."""
        self.task_list.clear()  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

        try:
            response = requests.get("https://corrywilliams.ru/distinctName", timeout=10)

            if response.status_code != 200:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π: {response.status_code}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
                return

            data = response.json()

            if not data.get("success") or not data.get("data"):
                logging.warning("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π.")
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
            for task_name in data["data"]:
                self.task_list.addItem(task_name)

            logging.info("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")

        except requests.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")

    def update_task_list(self):
        self.task_list.clear()
        for task in self.tasks:
            self.task_list.addItem(task)

    def filter_list(self):
        search_text = self.search_field.text().lower()
        self.task_list.clear()
        for task in self.tasks:
            if search_text in task.lower():
                self.task_list.addItem(task)

    def load_vps(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –í–ü–° –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä."""
        file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –í–ü–°", "", "Excel —Ñ–∞–π–ª—ã (*.xlsx)")
        if not file_path:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω!")
            return

        url = "https://corrywilliams.ru/uploadWPS"

        try:
            # –ß–∏—Ç–∞–µ–º Excel-—Ñ–∞–π–ª
            data = pd.read_excel(file_path)

            if data.empty:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–§–∞–π–ª –ø—É—Å—Ç–æ–π!")
                return

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
            self.progress_window = ProgressWindow(self, max_value=len(data))
            self.progress_window.show()

            for index, row in data.iterrows():
                # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                payload = {
                    'nazvanie_zdaniya': str(row.get('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è', '')),
                    'artikul': str(row.get('–ê—Ä—Ç–∏–∫—É–ª', '')),
                    'shk': str(row.get('–®—Ç—Ä–∏—Ö-–∫–æ–¥', '')).rstrip('.0') if isinstance(row.get('–®—Ç—Ä–∏—Ö-–∫–æ–¥', ''),
                                                                                    (int, float)) else str(
                        row.get('–®—Ç—Ä–∏—Ö-–∫–æ–¥', '')),
                    'mesto': str(row.get('–ú–µ—Å—Ç–æ', '')),
                    'vlozhennost': str(row.get('–í–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å', '')),
                    'pallet': str(row.get('–ü–∞–ª–ª–µ—Ç', '')),
                    'size_vps': str(row.get('–†–∞–∑–º–µ—Ä –í–ü–°', '')),
                    'vp': str(row.get('–í–ü', '')),
                    'itog_zakaza': row.get('–ò—Ç–æ–≥ –∑–∞–∫–∞–∑–∞'),  # –ë–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫—É
                    'shk_wps': str(row.get('–®–ö –í–ü–°', ''))
                }
                logging.info(payload)

                try:
                    response = requests.post(url, json=payload, timeout=30)

                    if response.status_code == 200:
                        logging.info(f"‚úÖ –°—Ç—Ä–æ–∫–∞ {index + 1}/{len(data)} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
                    else:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–æ–∫–∏ {index + 1}: {response.text}")

                except requests.RequestException as e:
                    logging.error(f"‚õî –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–æ–∫–∏ {index + 1}: {e}")
                    continue

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.progress_window.update_progress(index + 1)
                QApplication.processEvents()

            self.progress_window.close()
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–í—Å–µ —Å—Ç—Ä–æ–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

    def load_task(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ Excel-—Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", "", "Excel —Ñ–∞–π–ª—ã (*.xlsx)")
        if not file_path:
            return

        file_name = os.path.basename(file_path)
        pref = file_name.split(' ')[0]  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞

        try:
            data = pd.read_excel(file_path)
            if data.empty:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–§–∞–π–ª –ø—É—Å—Ç–æ–π.")
                return

            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data = data.replace({np.nan: None, '': None, ' ': None, 'nan': None, 'NaN': None})

            self.progress_window = ProgressWindow(self, max_value=len(data))
            self.progress_window.show()

            url = "https://corrywilliams.ru/uploadData"

            for index, row in data.iterrows():
                payload = {
                    'Artikul': row.get('–ê—Ä—Ç–∏–∫—É–ª'),
                    'Nazvanie_Tovara': row.get('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'),
                    'SHK': row.get('–®–ö'),
                    'Itog_Zakaz': row.get('–ò—Ç–æ–≥ –ó–∞–∫–∞–∑'),
                    'Srok_Godnosti': row.get('–°—Ä–æ–∫ –ì–æ–¥–Ω–æ—Å—Ç–∏'),
                    'pref': pref,
                    'Status': 0,
                    'Status_Zadaniya': 0,
                    'Nazvanie_Zadaniya': file_name,
                    'vp': row.get('–í–ü')
                }

                success = False
                while not success:
                    try:
                        response = requests.post(url, json=payload, timeout=75)
                        if response.status_code == 200:
                            logging.info(f'‚úÖ {index + 1}/{len(data)} - –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {payload}')
                            success = True
                        else:
                            logging.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {index + 1}: {response.text}')
                            time.sleep(2)  # –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                    except requests.exceptions.RequestException as e:
                        logging.error(f'‚õî –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {index + 1}: {e}')
                        time.sleep(2)

                self.progress_window.update_progress(index + 1)
                QApplication.processEvents()

            self.progress_window.close()
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ—Å—Ç—Ä–æ—á–Ω–æ.")

        except Exception as e:
            logging.error(f'‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}')
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")

    def download_task(self):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ Excel —Å —Ä—É—Å—Å–∫–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, –±–µ–∑ –ø–æ–ª—è ID."""

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
        selected_item = self.task_list.currentItem()

        if selected_item is None:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞!")
            return

        selected_task = selected_item.text().strip()

        if not selected_task:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ.")
            return

        logging.debug(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–∏—è: {selected_task}")

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            url = f'https://corrywilliams.ru/downloadData?task={selected_task}'
            response = requests.get(url, timeout=30)

            if response.status_code != 200:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {selected_task}: {response.status_code}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code}")
                return

            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON
            data = response.json()
            if not data.get("success") or not data.get("data"):
                logging.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {selected_task}")
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
                return

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-–æ—Ç–≤–µ—Ç –≤ DataFrame
            df = pd.DataFrame(data["data"])

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ ID
            if 'id' in df.columns:
                df.drop(columns=['id'], inplace=True)

            # –†—É—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
            column_mapping = {
                "nazvanie_zdaniya": "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è",
                "vp": "–í–ü",
                "artikul": "–ê—Ä—Ç–∏–∫—É–ª",
                "nazvanie_tovara": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                "shk": "–®—Ç—Ä–∏—Ö-–∫–æ–¥",
                "srok_godnosti": "–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏",
                "vlozhennost": "–í–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å",
                "pallet": "–ü–∞–ª–ª–µ—Ç",
                "shk_wps": "–®–ö –í–ü–°",
                "size_vps": "–†–∞–∑–º–µ—Ä –í–ü–°",
                "itog_zakaza": "–ò—Ç–æ–≥ –∑–∞–∫–∞–∑–∞",
            }

            df.rename(columns=column_mapping, inplace=True)

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            save_path, _ = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫", f"{selected_task}.xlsx",
                                                       "Excel —Ñ–∞–π–ª—ã (*.xlsx)")
            if not save_path:
                return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
            df.to_excel(save_path, index=False)

            logging.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {save_path}")
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {save_path}")

        except requests.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    main_window = TaskManagerApp()
    main_window.show()
    sys.exit(app.exec_())
