import os
import time
import logging
import numpy as np
import pandas as pd
import requests
import sys

from PyQt5 import QtWidgets, QtGui, QtCore
from PyQt5.QtWidgets import QApplication, QFileDialog, QMessageBox, QWidget, QHBoxLayout, QLabel, QVBoxLayout
from PyQt5.QtCore import Qt, pyqtSignal

from test import ProgressWindow  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞


class TaskItemWidget(QWidget):
    hide_clicked = pyqtSignal(str)
    
    def __init__(self, task_name, parent=None):
        super().__init__(parent)
        self.task_name = task_name
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞
        self.setAutoFillBackground(True)
        self.setObjectName("taskItem")
        self.setStyleSheet("""
            #taskItem {
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 4px;
            }
            #taskItem:hover {
                background-color: #f8f9fa;
                border: 1px solid #ced4da;
            }
        """)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
        layout = QHBoxLayout()
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(10)
        
        # –ò–∫–æ–Ω–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        self.doc_icon = QLabel("üìÑ")
        self.doc_icon.setStyleSheet("""
            font-size: 16px;
            color: #495057;
        """)
        
        # –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
        self.label = QLabel(task_name)
        self.label.setStyleSheet("""
            color: #495057;
            font-size: 14px;
        """)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∏—è (—Å–µ—Ä—ã–π –∫—Ä–µ—Å—Ç–∏–∫)
        self.hide_button = QtWidgets.QPushButton("‚úñ")
        self.hide_button.setFixedSize(24, 24)
        self.hide_button.setStyleSheet("""
            QPushButton {
                background-color: #adb5bd;
                color: white;
                border: none;
                border-radius: 2px;
                font-size: 12px;
                padding: 0;
            }
            QPushButton:hover {
                background-color: #6c757d;
            }
        """)
        self.hide_button.clicked.connect(self._on_hide_clicked)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞–∫–µ—Ç
        layout.addWidget(self.doc_icon)
        layout.addWidget(self.label, stretch=1)
        layout.addWidget(self.hide_button)
        
        self.setLayout(layout)
        
    def _on_hide_clicked(self):
        self.hide_clicked.emit(self.task_name)

class TaskManagerApp(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.tasks = []
        self.initUI()

    def initUI(self):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.setStyleSheet("""
            QWidget {
                background-color: #f1f3f5;
                color: #495057;
                font-family: 'Segoe UI', Arial;
                font-size: 14px;
            }
        """)

        # –ì–ª–∞–≤–Ω—ã–π –º–∞–∫–µ—Ç
        main_layout = QtWidgets.QVBoxLayout()
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(20, 10, 20, 20)

        # –ó–ê–ì–û–õ–û–í–û–ö
        header_card = QWidget()
        header_card.setObjectName("headerCard")
        header_card.setStyleSheet("""
            #headerCard {
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 10px;
            }
        """)
        header_layout = QHBoxLayout(header_card)
        header_layout.setContentsMargins(20, 15, 20, 15)
        
        # –ò–∫–æ–Ω–∫–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        icon_label = QLabel("üìã")
        icon_label.setStyleSheet("font-size: 24px; margin-right: 10px;")
        
        title_label = QLabel("–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞–Ω–∏–π")
        title_label.setStyleSheet("""
            font-size: 24px;
            font-weight: bold;
            color: #495057;
        """)
        
        header_layout.addStretch()
        header_layout.addWidget(icon_label)
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        
        main_layout.addWidget(header_card)

        # –ü–û–ò–°–ö
        search_card = QWidget()
        search_card.setObjectName("searchCard")
        search_card.setStyleSheet("""
            #searchCard {
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 10px;
            }
        """)
        search_layout = QHBoxLayout(search_card)
        search_layout.setContentsMargins(20, 15, 20, 15)
        
        # –ò–∫–æ–Ω–∫–∞ –ø–æ–∏—Å–∫–∞
        search_icon = QLabel("üîç")
        search_icon.setStyleSheet("""
            font-size: 16px;
            color: #6C757D;
            padding: 0 10px 0 0;
        """)
        
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.search_field = QtWidgets.QLineEdit()
        self.search_field.setPlaceholderText("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–¥–∞–Ω–∏—è...")
        self.search_field.textChanged.connect(self.filter_list)
        self.search_field.setStyleSheet("""
            QLineEdit {
                border: 1px solid #ced4da;
                border-radius: 20px;
                padding: 8px 15px;
                background-color: white;
                color: #495057;
            }
            QLineEdit:focus {
                border: 1px solid #6c757d;
            }
        """)
        
        search_layout.addWidget(search_icon)
        search_layout.addWidget(self.search_field)
        main_layout.addWidget(search_card)

        # –°–ü–ò–°–û–ö –ó–ê–î–ê–ù–ò–ô
        task_card = QWidget()
        task_card.setObjectName("taskCard")
        task_card.setStyleSheet("""
            #taskCard {
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 10px;
            }
        """)
        task_layout = QVBoxLayout(task_card)
        task_layout.setContentsMargins(20, 15, 20, 15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞
        list_header = QLabel("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:")
        list_header.setStyleSheet("""
            font-size: 14px;
            font-weight: bold;
            color: #495057;
            background-color: #f8f9fa;
            padding: 5px 10px;
            border-radius: 4px;
        """)
        task_layout.addWidget(list_header)
        
        # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
        self.task_list = QtWidgets.QListWidget()
        self.task_list.setStyleSheet("""
            QListWidget {
                border: none;
                background-color: white;
            }
            QListWidget::item {
                padding: 5px;
                margin: 1px 0;
            }
            QListWidget::item:selected {
                background-color: transparent;
            }
            QScrollBar:vertical {
                border: none;
                background: #f8f9fa;
                width: 12px;
                margin: 0;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background: #ced4da;
                border-radius: 6px;
                min-height: 30px;
            }
            QScrollBar::handle:vertical:hover {
                background: #adb5bd;
            }
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                height: 0px;
            }
            QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
                background: none;
            }
        """)
        
        task_layout.addWidget(self.task_list)
        main_layout.addWidget(task_card, 1)  # 1 = stretch factor

        # –ö–ù–û–ü–ö–ò
        button_card = QWidget()
        button_card.setObjectName("buttonCard")
        button_card.setStyleSheet("""
            #buttonCard {
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 10px;
            }
        """)
        button_layout = QHBoxLayout(button_card)
        button_layout.setContentsMargins(20, 15, 20, 15)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏—è
        self.load_task_btn = QtWidgets.QPushButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
        self.load_task_btn.setStyleSheet("""
            QPushButton {
                background-color: #adb5bd;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #868e96;
            }
        """)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –í–ü–°
        self.load_vps_btn = QtWidgets.QPushButton("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –í–ü–°")
        self.load_vps_btn.setStyleSheet("""
            QPushButton {
                background-color: #868e96;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #6c757d;
            }
        """)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        self.download_task_btn = QtWidgets.QPushButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
        self.download_task_btn.setStyleSheet("""
            QPushButton {
                background-color: #6c757d;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #495057;
            }
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–∞–∫–µ—Ç
        button_layout.addWidget(self.load_task_btn)
        button_layout.addWidget(self.load_vps_btn)
        button_layout.addWidget(self.download_task_btn)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self.load_task_btn.clicked.connect(self.load_task)
        self.load_vps_btn.clicked.connect(self.load_vps)
        self.download_task_btn.clicked.connect(self.download_task)
        
        main_layout.addWidget(button_card)

        # –°–¢–ê–¢–£–° –ë–ê–†
        status_card = QWidget()
        status_card.setObjectName("statusCard")
        status_card.setStyleSheet("""
            #statusCard {
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 10px;
            }
        """)
        status_layout = QHBoxLayout(status_card)
        status_layout.setContentsMargins(20, 10, 20, 10)
        
        # –ò–∫–æ–Ω–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info_icon = QLabel("‚ÑπÔ∏è")
        info_icon.setStyleSheet("""
            font-size: 14px;
            margin-right: 5px;
        """)
        
        # –ú–µ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        self.status_label = QLabel("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: 0")
        self.status_label.setStyleSheet("""
            color: #6c757d;
            font-size: 14px;
        """)
        
        status_layout.addWidget(info_icon)
        status_layout.addWidget(self.status_label, 1)
        main_layout.addWidget(status_card)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
        self.setLayout(main_layout)
        self.setWindowTitle("–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞–Ω–∏–π")
        self.setMinimumSize(850, 650)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_initial_data()

    def has_single_sheet(self, file_path):
        try:
            xl = pd.ExcelFile(file_path)
            return len(xl.sheet_names) == 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: {e}")
            return False

    def load_initial_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç QListWidget."""
        self.task_list.clear()
        self.tasks.clear()
        self.status_label.setText("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")

        try:
            response = requests.get("http://10.171.12.36:3005/distinctName", timeout=10)

            if response.status_code != 200:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π: {response.status_code}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
                self.status_label.setText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                return

            data = response.json()

            if not data.get("success") or not data.get("data"):
                logging.warning("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π.")
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
                self.status_label.setText("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
            self.tasks = data["data"]
            self.update_task_list()
            logging.info("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
            self.status_label.setText(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(self.tasks)}")

        except requests.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            self.status_label.setText("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")

    def update_task_list(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π"""
        self.task_list.clear()
        for i, task in enumerate(self.tasks):
            item = QtWidgets.QListWidgetItem()
            item.setSizeHint(QtCore.QSize(0, 40))
            self.task_list.addItem(item)
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º
            task_widget = TaskItemWidget(f"{i+1}. {task}")
            task_widget.hide_clicked.connect(self.hide_task)
            self.task_list.setItemWidget(item, task_widget)

    def filter_list(self):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        search_text = self.search_field.text().lower()
        self.task_list.clear()
        
        filtered_tasks = [(i, task) for i, task in enumerate(self.tasks) if search_text in task.lower()]
        for i, task in filtered_tasks:
            item = QtWidgets.QListWidgetItem()
            item.setSizeHint(QtCore.QSize(0, 40))
            self.task_list.addItem(item)
            
            task_widget = TaskItemWidget(f"{i+1}. {task}")
            task_widget.hide_clicked.connect(self.hide_task)
            self.task_list.setItemWidget(item, task_widget)
            
        self.status_label.setText(f"–ù–∞–π–¥–µ–Ω–æ: {len(filtered_tasks)} –∏–∑ {len(self.tasks)}")

    def hide_task(self, task_name):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ —Å –Ω–æ–º–µ—Ä–æ–º
        original_task_name = task_name.split('. ', 1)[1] if '. ' in task_name else task_name
        
        try:
            reply = QMessageBox()
            reply.setWindowTitle("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
            reply.setText(f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã—Ç—å –∑–∞–¥–∞–Ω–∏–µ?")
            reply.setInformativeText(f"–ó–∞–¥–∞–Ω–∏–µ: '{original_task_name}'")
            reply.setIcon(QMessageBox.Question)
            reply.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
            reply.setDefaultButton(QMessageBox.No)
            
            if reply.exec_() == QMessageBox.No:
                return
                
            self.status_label.setText(f"–°–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞–Ω–∏—è: {original_task_name}...")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º nazvanie_zdaniya
            payload = {
                "nazvanie_zdaniya": original_task_name
            }
            
            response = requests.post("http://10.171.12.36:3005/hideTask", 
                                  json=payload,
                                  timeout=10)
            
            if response.status_code == 200:
                # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
                self.tasks.remove(original_task_name)
                self.update_task_list()
                logging.info(f"–ó–∞–¥–∞–Ω–∏–µ {original_task_name} —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä—ã—Ç–æ")
                self.status_label.setText(f"–ó–∞–¥–∞–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {response.status_code}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
                self.status_label.setText("–û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞–Ω–∏—è")
                
        except requests.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            self.status_label.setText("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∑–∞–¥–∞–Ω–∏—è")

    def load_vps(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –í–ü–°", "", "Excel —Ñ–∞–π–ª—ã (*.xlsx)")
        if not file_path:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω!")
            return

        if not self.has_single_sheet(file_path):
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞",
                                 "–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Å—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º –ª–∏—Å—Ç–æ–º!")
            return

        url = "http://10.171.12.36:3005/uploadWPS"

        try:
            # –ß–∏—Ç–∞–µ–º Excel-—Ñ–∞–π–ª
            data = pd.read_excel(file_path)

            if data.empty:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–§–∞–π–ª –ø—É—Å—Ç–æ–π!")
                return

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
            self.progress_window = ProgressWindow(self, max_value=len(data))
            self.progress_window.show()

            for index, row in data.iterrows():
                # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                payload = {
                    'nazvanie_zdaniya': str(row.get('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è', '')),
                    'artikul': str(row.get('–ê—Ä—Ç–∏–∫—É–ª', '')),
                    'shk': str(row.get('–®—Ç—Ä–∏—Ö-–∫–æ–¥', '')).rstrip('.0') if isinstance(row.get('–®—Ç—Ä–∏—Ö-–∫–æ–¥', ''),
                                                                                    (int, float)) else str(
                        row.get('–®—Ç—Ä–∏—Ö-–∫–æ–¥', '')),
                    'mesto': str(row.get('–ú–µ—Å—Ç–æ', '')),
                    'vlozhennost': str(row.get('–í–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å', '')),
                    'pallet': str(row.get('–ü–∞–ª–ª–µ—Ç', '')),
                    'size_vps': str(row.get('–†–∞–∑–º–µ—Ä –í–ü–°', '')),
                    'vp': str(row.get('–í–ü', '')),
                    'itog_zakaza': row.get('–ò—Ç–æ–≥ –∑–∞–∫–∞–∑–∞'),  # –ë–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫—É
                    'shk_wps': str(row.get('–®–ö –í–ü–°', ''))
                }
                logging.info(payload)

                try:
                    response = requests.post(url, json=payload, timeout=30)

                    if response.status_code == 200:
                        logging.info(f"‚úÖ –°—Ç—Ä–æ–∫–∞ {index + 1}/{len(data)} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
                    else:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–æ–∫–∏ {index + 1}: {response.text}")

                except requests.RequestException as e:
                    logging.error(f"‚õî –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–æ–∫–∏ {index + 1}: {e}")
                    continue

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.progress_window.update_progress(index + 1)
                QApplication.processEvents()

            self.progress_window.close()
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–í—Å–µ —Å—Ç—Ä–æ–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

    def load_task(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", "", "Excel —Ñ–∞–π–ª—ã (*.xlsx)")
        if not file_path:
            return

        if not self.has_single_sheet(file_path):
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞",
                                 "–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Å—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º –ª–∏—Å—Ç–æ–º!")
            return

        file_name = os.path.basename(file_path)
        pref = file_name.split(' ')[0]  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞

        try:
            data = pd.read_excel(file_path)
            if data.empty:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–§–∞–π–ª –ø—É—Å—Ç–æ–π.")
                return

            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data = data.replace({np.nan: None, '': None, ' ': None, 'nan': None, 'NaN': None})

            self.progress_window = ProgressWindow(self, max_value=len(data))
            self.progress_window.show()

            url = "http://10.171.12.36:3005/uploadData"

            for index, row in data.iterrows():
                payload = {
                    'Artikul': row.get('–ê—Ä—Ç–∏–∫—É–ª'),
                    'Nazvanie_Tovara': row.get('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'),
                    'SHK': row.get('–®–ö'),
                    'Nomenklatura': row.get('–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'),
                    'Itog_Zakaz': row.get('–ò—Ç–æ–≥ –ó–∞–∫–∞–∑'),
                    'Srok_Godnosti': row.get('–°—Ä–æ–∫ –ì–æ–¥–Ω–æ—Å—Ç–∏'),
                    'pref': pref,
                    'Status': 0,
                    'Status_Zadaniya': 0,
                    'Nazvanie_Zadaniya': file_name,
                    'vp': row.get('–í–ü'),
                }
                logging.debug(f"[{index + 1}/{len(data)}] Payload: {payload}")
                success = False
                while not success:
                    try:
                        response = requests.post(url, json=payload, timeout=75)
                        if response.status_code == 200:
                            logging.info(f'‚úÖ {index + 1}/{len(data)} - –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {payload}')
                            success = True
                        else:
                            logging.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {index + 1}: {response.text}')
                            time.sleep(2)  # –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                    except requests.exceptions.RequestException as e:
                        logging.error(f'‚õî –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {index + 1}: {e}')
                        time.sleep(2)

                self.progress_window.update_progress(index + 1)
                QApplication.processEvents()

            self.progress_window.close()
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ—Å—Ç—Ä–æ—á–Ω–æ.")

        except Exception as e:
            logging.error(f'‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}')
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")

    def download_task(self):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ Excel."""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
        current_item = self.task_list.currentItem()
        if not current_item:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞!")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–∂–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –µ–≥–æ —Ç–µ–∫—Å—Ç
        item_widget = self.task_list.itemWidget(current_item)
        if not item_widget:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è!")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –±–µ–∑ –Ω–æ–º–µ—Ä–∞
        task_name = item_widget.task_name
        original_task_name = task_name.split('. ', 1)[1] if '. ' in task_name else task_name

        try:
            self.status_label.setText(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: {original_task_name}...")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º task
            url = f'http://10.171.12.36:3005/downloadData'
            params = {'task': original_task_name}
            
            response = requests.get(url, params=params, timeout=30)

            if response.status_code != 200:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {response.status_code}")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code}")
                self.status_label.setText("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                return

            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON
            data = response.json()
            if not data.get("success") or not data.get("data"):
                logging.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {original_task_name}")
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
                self.status_label.setText("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                return

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-–æ—Ç–≤–µ—Ç –≤ DataFrame
            df = pd.DataFrame(data["data"])

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ ID –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if 'id' in df.columns:
                df.drop(columns=['id'], inplace=True)

            # –†—É—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
            column_mapping = {
                "nazvanie_zdaniya": "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è",
                "vp": "–í–ü",
                "artikul": "–ê—Ä—Ç–∏–∫—É–ª",
                "nazvanie_tovara": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                "shk": "–®—Ç—Ä–∏—Ö-–∫–æ–¥",
                "srok_godnosti": "–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏",
                "vlozhennost": "–í–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å",
                "pallet": "–ü–∞–ª–ª–µ—Ç",
                "shk_wps": "–®–ö –í–ü–°",
                "size_vps": "–†–∞–∑–º–µ—Ä –í–ü–°",
                "itog_zakaza": "–ò—Ç–æ–≥ –∑–∞–∫–∞–∑–∞",
                "Nomenklatura": "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"
            }

            df.rename(columns=column_mapping, inplace=True)

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            save_path, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫",
                f"{original_task_name}.xlsx",
                "Excel —Ñ–∞–π–ª—ã (*.xlsx)"
            )
            
            if not save_path:
                self.status_label.setText("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
            df.to_excel(save_path, index=False)
            
            self.status_label.setText(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {os.path.basename(save_path)}")
            logging.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {save_path}")
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

        except requests.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            self.status_label.setText("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
            self.status_label.setText("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    main_window = TaskManagerApp()
    main_window.show()
    sys.exit(app.exec_())
